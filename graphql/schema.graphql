"A datetime string with format `Y-m-d H:i:s`, e.g. `2018-05-23 13:43:32`."
scalar DateTime @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\DateTime")

"Indicates what fields are available at the top level of a query operation."
type Query {
    "Find a single user by an identifying attribute."
    user(
      "Search by primary key."
      id: ID @eq @rules(apply: ["prohibits:email", "required_without:email"])

      "Search by email address."
      email: String @eq @rules(apply: ["prohibits:id", "required_without:id", "email"])
    ): User @find

    "List multiple users."
    users(
      "Filters by name. Accepts SQL LIKE wildcards `%` and `_`."
      name: String @where(operator: "like")
    ): [User!]! @paginate(defaultCount: 10)
}

"Account of a person who uses this application."
type User {
    "Unique primary key."
    id: ID!

    "Non-unique name."
    name: String!

    "Unique email address."
    email: String!

    "When the email was verified."
    email_verified_at: DateTime

    "When the account was created."
    created_at: DateTime!

    "When the account was last updated."
    updated_at: DateTime!
}

# type Query {
#   hello: String! @field(resolver: "App\\GraphQL\\Queries\\Hello@resolve")
# }

type FilmWithoutCharacters {
  title: String
  uid: String
  url: String
  openingCrawl: String

}

type Film {
  title: String
  openingCrawl: String
  uid: String
  url: String
  characters: [PersonWithoutFilms] @field(resolver: "App\\GraphQL\\Resolvers\\SwapiMoviesResolver@characters")
}

type PersonWithoutFilms {
  name: String
  uid: String
  url: String
}

type Details {
  birthYear: String
  gender: String
  height: String
  mass: String
  hairColor: String
  eyeColor: String
}

type SwapiPerson {
  name: String
  uid: String
  url: String
  details: Details
  films: [FilmWithoutCharacters] @field(resolver: "App\\GraphQL\\Resolvers\\SwapiPeopleResolver@films")
}

type topFields {
  root_field: String
  count: Int
  percentage: Float
  total: Int
  created_at: DateTime
}
type AverageDuration {
  root_field: String
  average_duration: String
  created_at: DateTime
}
type BusiestHourToday {
  count: Int
  hour: Int
  updated_at: DateTime
  created_at: DateTime
}


type Statistics {
  topFields: [topFields]
  AverageDuration: [AverageDuration]
  BusiestHourToday: [BusiestHourToday]
}

type Query {
  # Buscar todos os personagens
  swapiPeople(name: String): [SwapiPerson] @field(resolver: "App\\GraphQL\\Resolvers\\SwapiPeopleResolver@all")
  
  # Buscar todos os filmes
  swapiMovies(title: String): [Film] @field(resolver: "App\\GraphQL\\Resolvers\\SwapiMoviesResolver@all")
  
  swapiMovie(id: Int!): Film @field(resolver: "App\\GraphQL\\Resolvers\\SwapiMoviesResolver@details")
  
  # Buscar um personagem por ID
  swapiPerson(id: Int!): SwapiPerson @field(resolver: "App\\GraphQL\\Resolvers\\SwapiPeopleResolver@details")

  statistics: Statistics @field(resolver: "App\\GraphQL\\Resolvers\\StatisticsResolver@stats")
}
